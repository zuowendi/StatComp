devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
dedevtools::check
devtools::check
devtools::build()
devtools::build()
install.packages('../StatComp_1.0.zip')
library(StatComp)
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
set.seed(3000)
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
N = 2000
sigma = c(.05, .5, 2, 16)
x0 = 25
rw1 = rw.Metropolis(sigma[1],x0,N)
rw2 = rw.Metropolis(sigma[2],x0,N)
rw3 = rw.Metropolis(sigma[3],x0,N)
rw4 = rw.Metropolis(sigma[4],x0,N)
#number of candidate points rejected
Rej = cbind(rw1$k, rw2$k, rw3$k, rw4$k)
Acc = round((N-Rej)/N,4)
rownames(Acc) = "Accept rates"
colnames(Acc) = paste("sigma",sigma)
knitr::kable(Acc)
#plot
par(mfrow=c(2,2))  #display 4 graphs together
rw = cbind(rw1$x, rw2$x, rw3$x,  rw4$x)
for (j in 1:4) {
plot(rw[,j], type="l",
xlab=bquote(sigma == .(round(sigma[j],3))),
ylab="X", ylim=range(rw[,j]))
}
set.seed(3000)
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
N = 2000
sigma = c(.05, .5, 2, 16)
x0 = 25
rw1 = rw.Metropolis(sigma[1],x0,N)
rw2 = rw.Metropolis(sigma[2],x0,N)
rw3 = rw.Metropolis(sigma[3],x0,N)
rw4 = rw.Metropolis(sigma[4],x0,N)
#number of candidate points rejected
Rej = cbind(rw1$k, rw2$k, rw3$k, rw4$k)
Acc = round((N-Rej)/N,4)
rownames(Acc) = "Accept rates"
colnames(Acc) = paste("sigma",sigma)
knitr::kable(Acc)
#plot
par(mfrow=c(2,2))  #display 4 graphs together
rw = cbind(rw1$x, rw2$x, rw3$x,  rw4$x)
for (j in 1:4) {
plot(rw[,j], type="l",
xlab=bquote(sigma == .(round(sigma[j],3))),
ylab="X", ylim=range(rw[,j]))
}
set.seed(3000)
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
N = 2000
sigma = c(.05, .5, 2, 16)
x0 = 25
rw1 = rw.Metropolis(sigma[1],x0,N)
rw2 = rw.Metropolis(sigma[2],x0,N)
rw3 = rw.Metropolis(sigma[3],x0,N)
rw4 = rw.Metropolis(sigma[4],x0,N)
#number of candidate points rejected
Rej = cbind(rw1$k, rw2$k, rw3$k, rw4$k)
Acc = round((N-Rej)/N,4)
rownames(Acc) = "Accept rates"
colnames(Acc) = paste("sigma",sigma)
knitr::kable(Acc)
#plot
par(mfrow=c(2,2))  #display 4 graphs together
rw = cbind(rw1$x, rw2$x, rw3$x,  rw4$x)
for (j in 1:4) {
plot(rw[,j], type="l",
xlab=bquote(sigma == .(round(sigma[j],3))),
ylab="X", ylim=range(rw[,j]))
}
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
devtools::build()
install.packages('../StatComp_1.0.zip')
install.packages('../StatComp20071.zip')
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,10), rep(1,90))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,10), rep(1,90))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
remove.packages("StatComp")
devtools::install_github("zuowendi/StatComp",
build_vignettes = TRUE,force=T)
devtools::install_github("zuowendi/StatComp")
remove.packages("SC19017")
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
devtools::install_github("zhaolotelli/SC19017")
ypred2 <- StatComp::myKNN(X, y,test_x = X, k = 5)
library(StatComp)
ypred2 <- StatComp::myKNN(X, y,test_x = X, k = 5)
library(SC19017)
data(wine)
head(wine)
y <- wine[, 1]
X <- scale(wine[, -1], center = TRUE, scale = TRUE)
n <- nrow(X)
library(SC19017)
install.packages('../StatCom20071.zip')
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- StatComp::myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- StatComp::myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(SC19017)
data(wine)
head(wine)
y <- wine[, 1]
X <- scale(wine[, -1], center = TRUE, scale = TRUE)
n <- nrow(X)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- StatComp::myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
rwC <- rw_MetropolisC(1,25,2000)$x
plot(rwC, type="l", xlab=bquote(sigma == 1), ylab="X", ylim=range(rwC))
rwC <- StatComp::rw_MetropolisC(1,25,2000)$x
plot(rwC, type="l", xlab=bquote(sigma == 1), ylab="X", ylim=range(rwC))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
remove.packages("SC19017")
remove.packages("StatComp")
getwd()
setwd("F:/R")
install.packages('../StatComp20071.zip')
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
devtools::install_github("zhanghfd/statcomp",
build_vignettes = TRUE,force=T)
devtools::install_github("zuowendi/statcomp",
build_vignettes = TRUE,force=T)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
install.packages('../StatComp20071.tar')
install.packages("BiocInstaller", repos = "http://bioconductor.org/packages/3.7/bioc")
install.packages('../StatComp20071.tar')
library(StatComp)
remove.packages("StatComp")
devtools::install_github("zuowendi/statcomp",build_vignettes = TRUE,force=T)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred2 <- myKNN(X, y,test_x = X, k = 5)
table(ypred2, y)
library(StatComp)
data("iris")
X = as.matrix(subset(iris,Species == "setosa" | Species == "versicolor")[1:4])
y = append(rep(0,50), rep(1,50))
ypred1 <- myKNN(X, y,test_x = X, k = 5)
table(ypred1, y)
ypred2 <- myLDA(X, y,test_x = X)
table(ypred2$ypred, y)
rwC <- rw_MetropolisC(1,25,2000)$x
library(Rcpp)
rwC <- rw_MetropolisC(1,25,2000)$x
